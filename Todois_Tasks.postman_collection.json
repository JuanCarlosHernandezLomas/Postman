{
	"info": {
		"_postman_id": "474c5d57-d48c-4078-859a-88c21cec6d2e",
		"name": "Todois_Tasks",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "19426156"
	},
	"item": [
		{
			"name": "Create_task",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jasonData = pm.response.json();\r",
							"pm.environment.set(\"task_id\", jasonData.id);\r",
							"\r",
							"var schema = {\r",
							"    \"items\": {\r",
							"        \"type\": \"boolean\"\r",
							"    }\r",
							"};\r",
							"var jsonData = pm.response.json();\r",
							"pm.test(\"-\tValidate schema\", ()=>{\r",
							"    pm.expect(jsonData.id).to.be.a(\"string\")\r",
							"    pm.expect(jsonData.assigner_id).to.be.null\r",
							"    pm.expect(jsonData.assignee_id).to.be.null\r",
							"    pm.expect(jsonData.project_id).to.be.a(\"string\")\r",
							"    pm.expect(jsonData.section_id).to.be.null\r",
							"    pm.expect(jsonData.parent_id).to.be.null\r",
							"    pm.expect(jsonData.order).to.be.a(\"number\")\r",
							"    pm.expect(jsonData.content).to.be.a(\"string\")\r",
							"    pm.expect(jsonData.description).to.be.a(\"string\")\r",
							"    pm.expect(jsonData.is_completed).to.be.a(\"boolean\")\r",
							"    pm.expect(jsonData.labels).to.be.an(\"array\")\r",
							"    pm.expect(jsonData.priority).to.be.a(\"number\")\r",
							"    pm.expect(jsonData.comment_count).to.be.a(\"number\")\r",
							"    pm.expect(jsonData.creator_id).to.be.a(\"string\")\r",
							"    pm.expect(jsonData.created_at).to.be.a(\"string\")\r",
							"})\r",
							"pm.test(\"Response time is below than 900ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(900);\r",
							"});\r",
							"\r",
							"pm.test(\"Successful request\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 204]);\r",
							"    \r",
							"});\r",
							"\r",
							"pm.test(\"Response time is below than 10ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(10);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "X-Request-Id",
						"value": "$(uuidgen)",
						"type": "text"
					},
					{
						"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
						"key": "Authorization",
						"value": "Bearer 0123456789abcdef0123456789",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"content\": \"Buy Milk\", \r\n    \"due_string\": \"Tomorrow at 12:00\",\r\n    \"project_id\": {{project_id}},\r\n    \"priority\": 4\r\n}"
				},
				"url": {
					"raw": "{{base_URL}}/tasks",
					"host": [
						"{{base_URL}}"
					],
					"path": [
						"tasks"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get_Active_Tasks",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response time is below than 900ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(900);\r",
							"});\r",
							"\r",
							"pm.test(\"Successful request\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 204]);\r",
							"});\r",
							"pm.test(\"Response time is less than 10ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(10);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_URL}}/tasks",
					"host": [
						"{{base_URL}}"
					],
					"path": [
						"tasks"
					]
				}
			},
			"response": []
		},
		{
			"name": "GET_task",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();\r",
							"pm.test(\"-\tValidate schema\", ()=>{\r",
							"    pm.expect(jsonData.id).to.be.a(\"string\")\r",
							"    pm.expect(jsonData.assigner_id).to.be.null\r",
							"    pm.expect(jsonData.assignee_id).to.be.null\r",
							"    pm.expect(jsonData.project_id).to.be.a(\"string\")\r",
							"    pm.expect(jsonData.section_id).to.be.null\r",
							"    pm.expect(jsonData.parent_id).to.be.null\r",
							"    pm.expect(jsonData.order).to.be.a(\"number\")\r",
							"    pm.expect(jsonData.content).to.be.a(\"string\")\r",
							"    pm.expect(jsonData.description).to.be.a(\"string\")\r",
							"    pm.expect(jsonData.is_completed).to.be.a(\"boolean\")\r",
							"    pm.expect(jsonData.labels).to.be.an(\"array\")\r",
							"    pm.expect(jsonData.priority).to.be.a(\"number\")\r",
							"    pm.expect(jsonData.comment_count).to.be.a(\"number\")\r",
							"    pm.expect(jsonData.creator_id).to.be.a(\"string\")\r",
							"    pm.expect(jsonData.created_at).to.be.a(\"string\")\r",
							"})\r",
							"\r",
							"pm.test(\"Response time is below than 900ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(900);\r",
							"});\r",
							"\r",
							"pm.test(\"Successful request\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 204]);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 10ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(10);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_URL}}/tasks/{{task_id}}",
					"host": [
						"{{base_URL}}"
					],
					"path": [
						"tasks",
						"{{task_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update_task",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response time is below than 900ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(900);\r",
							"});\r",
							"\r",
							"pm.test(\"Successful request\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 204]);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 10ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(10);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"pm.test(\"-\tValidate schema\", ()=>{\r",
							"    pm.expect(jsonData.id).to.be.a(\"string\")\r",
							"    pm.expect(jsonData.assigner_id).to.be.null\r",
							"    pm.expect(jsonData.assignee_id).to.be.null\r",
							"    pm.expect(jsonData.project_id).to.be.a(\"string\")\r",
							"    pm.expect(jsonData.section_id).to.be.null\r",
							"    pm.expect(jsonData.parent_id).to.be.null\r",
							"    pm.expect(jsonData.order).to.be.a(\"number\")\r",
							"    pm.expect(jsonData.content).to.be.a(\"string\")\r",
							"    pm.expect(jsonData.description).to.be.a(\"string\")\r",
							"    pm.expect(jsonData.is_completed).to.be.a(\"boolean\")\r",
							"    pm.expect(jsonData.labels).to.be.an(\"array\")\r",
							"    pm.expect(jsonData.priority).to.be.a(\"number\")\r",
							"    pm.expect(jsonData.comment_count).to.be.a(\"number\")\r",
							"    pm.expect(jsonData.creator_id).to.be.a(\"string\")\r",
							"    pm.expect(jsonData.created_at).to.be.a(\"string\")\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"content\": \"Buy Coffee\",\r\n    \"description\": \"buy fresh coffe\",\r\n    \"priority\": 2,\r\n    \"datetime\": \"null\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_URL}}/tasks/{{task_id}}",
					"host": [
						"{{base_URL}}"
					],
					"path": [
						"tasks",
						"{{task_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Close_Task",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response time is below than 900ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(900);\r",
							"});\r",
							"\r",
							"pm.test(\"Successful request\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 204]);\r",
							"});\r",
							"pm.test(\"Response time is less than 10ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(10);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_URL}}/tasks/{{task_id}}/close",
					"host": [
						"{{base_URL}}"
					],
					"path": [
						"tasks",
						"{{task_id}}",
						"close"
					]
				}
			},
			"response": []
		},
		{
			"name": "Reopen_Task",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response time is below than 900ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(900);\r",
							"});\r",
							"\r",
							"pm.test(\"Successful request\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 204]);\r",
							"});\r",
							"pm.test(\"Response time is less than 10ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(10);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{base_URL}}/tasks/{{task_id}}/reopen",
					"host": [
						"{{base_URL}}"
					],
					"path": [
						"tasks",
						"{{task_id}}",
						"reopen"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete_Task",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response time is below than 900ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(900);\r",
							"});\r",
							"\r",
							"pm.test(\"Successful request\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 204]);\r",
							"});\r",
							"pm.test(\"Response time is below than 10ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(10);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_URL}}/tasks/{{task_id}}",
					"host": [
						"{{base_URL}}"
					],
					"path": [
						"tasks",
						"{{task_id}}"
					]
				}
			},
			"response": []
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{token }}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}